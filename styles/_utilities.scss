@use 'sass:map';
@use 'sass:string';
@use 'styles/themes.module.scss' as themes;

// Globals
$font-size: 12px;
$line-height: 18px;
$p-line-height-modifier: 1.25;
$page-padding: calc($line-height * 7) 0.5in calc($line-height * 2);
$page-gap: calc($line-height * 5);
$small-width: 500px;
$medium-width: 1024px;
$large-width: 1025px;
$max-width: 680px;

// Shadows
@mixin shadow-variables {
    --border-color: var(--primary);
    --shadow-1: var(--background-color);
    --shadow-2: var(--primary-20);
    --shadow-3: var(--primary-20);
    --transition-speed: 150ms;
    --x: 3px;
    --y: 7px;
}

@mixin shadow-base {
    border-bottom: solid 1px var(--border-color);
    box-shadow: 
        // 1
        inset var(--x) 0px 0px 0px var(--shadow-1),
        // 2
        inset 0px calc(var(--y) * -1) 0px 0px var(--shadow-2),
        // 3
        var(--x) var(--y) 0px 0px var(--shadow-3);

    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;
    transition: all var(--transition-speed) linear;
}

@mixin shadow-hover {
    box-shadow: 
        // 1
        inset 0px 0px 0px 0px var(--shadow-1),
        // 2
        inset 0px calc(var(--y) * -2) 0px 0px var(--shadow-2),
        // 3
        0px 0px 0px 0px var(--shadow-3);
}

// Themes
@function format($iterable) {
    $str: '';

    @each $key, $value in $iterable {
        $entry-string: $key;

        $str: $str + ', ' + $entry-string;
    }

    $str: string.slice($str, 3); // remove leading ', ' from ', entry1, entry2'

    @return string.unquote($str);
}

$default: themes.$default;
$themes: themes.$themes;
$dark-colors: map.get($themes, 'Dark');
$light-colors: map.get($themes, 'Light');
$combined-colors: ($dark-colors, $light-colors);

@debug format($dark-colors);

$theme-colors: (
    'Dark': format($dark-colors),
    'Light': format($light-colors),
);

@mixin defaultColor($variableName, $value, $mode, $options) {
    @if $value {
        --#{$variableName}: #{$value};
    } @else {
        --#{$variableName}: #{map.get($options, $mode)};
    }
}

@mixin create-theme(
    $type,
    $prefix,
    $mode,
    $primary,
    $secondary,
    $tertiary,
    $accent,
    $background-color: null,
    $color: null,
    $muted: null
) {
    $opacities: '05', '10', '15', '20', '30', '50';
    $colors: (
        'primary': $primary,
        'secondary': $secondary,
        'tertiary': $tertiary,
        'accent': $accent,
    );

    @if $type == null {
        // Page
        @include defaultColor(
            'background-color',
            $background-color,
            $mode,
            (
                'Light': #ffffff,
                'Dark': #221d29,
            )
        );

        @include defaultColor(
            'color',
            $color,
            $mode,
            (
                'Light': #242424,
                'Dark': #d4d4d4,
            )
        );

        @include defaultColor(
            'muted',
            $muted,
            $mode,
            (
                'Light': #757575,
                'Dark': #808080,
            )
        );

        @each $name, $color in $colors {
            --#{$name}: #{$color};
            --#{if($prefix, #{$prefix}-, '')}#{$name}-string: '#{$color}';

            @each $opacity in $opacities {
                --#{$name}-#{$opacity}: #{$color}#{$opacity};
            }

            @if $mode == 'Light' {
                --#{$name}-variant: #{mix(white, $color, 10%)};
            } @else if $mode == 'Dark' {
                --#{$name}-variant: #{mix(black, $color, 10%)};
            }
        }

        // Code block word highLights
        @if $mode == 'Light' {
            $word-background-color: #ffdcc2;
            $r-word-background-color: #ffc2d3;
            $g-word-background-color: #c2ffce;
            $b-word-background-color: #c2efff;
        } @else if $mode == 'Dark' {
            $word-background-color: #63341d;
            $r-word-background-color: #9f1239;
            $g-word-background-color: #115e59;
            $b-word-background-color: #1e40af;
        }
    }

    @if $type == 'strings' {
        @each $name, $color in $colors {
            --#{$mode}-#{$name}-string: '#{$color}';

            @each $opacity in $opacities {
                --#{$mode}-#{$name}-#{$opacity}-string: #{$color}#{$opacity};
            }

            @if $mode == 'Light' {
                --#{$mode}-#{$name}-variant: #{mix(white, $color, 10%)};
            } @else if $mode == 'Dark' {
                --#{$mode}-#{$name}-variant: #{mix(black, $color, 10%)};
            }
        }
    }
}

// TODO: dry up these calls
@mixin prefers-dark {
    @include create-theme(
        $type: null,
        $prefix: null,
        $mode: 'Dark',
        $primary: map.get($themes, 'Dark', $default, 'primary'),
        $secondary: map.get($themes, 'Dark', $default, 'secondary'),
        $tertiary: map.get($themes, 'Dark', $default, 'tertiary'),
        $accent: map.get($themes, 'Dark', $default, 'accent'),
        $background-color:
            map.get($themes, 'Dark', $default, 'background-color'),
        $color: map.get($themes, 'Dark', $default, 'color'),
        $muted: map.get($themes, 'Dark', $default, 'muted')
    );

    @include create-theme(
        $type: 'strings',
        $prefix: null,
        $mode: 'Light',
        $primary: map.get($themes, 'Dark', $default, 'primary'),
        $secondary: map.get($themes, 'Dark', $default, 'secondary'),
        $tertiary: map.get($themes, 'Dark', $default, 'tertiary'),
        $accent: map.get($themes, 'Dark', $default, 'accent'),
        $background-color:
            map.get($themes, 'Dark', $default, 'background-color'),
        $color: map.get($themes, 'Dark', $default, 'color'),
        $muted: map.get($themes, 'Dark', $default, 'muted')
    );
}

@mixin prefers-light {
    @include create-theme(
        $type: null,
        $prefix: null,
        $mode: 'Light',
        $primary: map.get($themes, 'Light', $default, 'primary'),
        $secondary: map.get($themes, 'Light', $default, 'secondary'),
        $tertiary: map.get($themes, 'Light', $default, 'tertiary'),
        $accent: map.get($themes, 'Light', $default, 'accent'),
        $background-color:
            map.get($themes, 'Light', $default, 'background-color'),
        $color: map.get($themes, 'Light', $default, 'color'),
        $muted: map.get($themes, 'Light', $default, 'muted')
    );

    @include create-theme(
        $type: 'strings',
        $prefix: null,
        $mode: 'Dark',
        $primary: map.get($themes, 'Light', $default, 'primary'),
        $secondary: map.get($themes, 'Light', $default, 'secondary'),
        $tertiary: map.get($themes, 'Light', $default, 'tertiary'),
        $accent: map.get($themes, 'Light', $default, 'accent'),
        $background-color:
            map.get($themes, 'Light', $default, 'background-color'),
        $color: map.get($themes, 'Light', $default, 'color'),
        $muted: map.get($themes, 'Light', $default, 'muted')
    );
}

@mixin colors($selector: '') {
    @each $name, $mode in $themes {
        #{$selector}[data-prefers-color-scheme='#{$name}'] {
            @include create-theme(
                $type: null,
                $prefix: null,
                $mode: $name,
                $primary: map.get($mode, $default, 'primary'),
                $secondary: map.get($mode, $default, 'secondary'),
                $tertiary: map.get($mode, $default, 'tertiary'),
                $accent: map.get($mode, $default, 'accent'),
                $background-color: map.get($mode, $default, 'background-color'),
                $color: map.get($mode, $default, 'color'),
                $muted: map.get($mode, $default, 'muted')
            );

            @include create-theme(
                $type: 'strings',
                $prefix: null,
                $mode: if($name == 'Light', 'Dark', 'Light'),
                $primary: map.get($mode, $default, 'primary'),
                $secondary: map.get($mode, $default, 'secondary'),
                $tertiary: map.get($mode, $default, 'tertiary'),
                $accent: map.get($mode, $default, 'accent'),
                $background-color: map.get($mode, $default, 'background-color'),
                $color: map.get($mode, $default, 'color'),
                $muted: map.get($mode, $default, 'muted')
            );

            @each $color, $colors in $mode {
                // Blue
                &[data-#{string.to-lower-case($name)}-theme='#{$color}'] {
                    @include create-theme(
                        $type: null,
                        $prefix: null,
                        $mode: $name,
                        $primary: map.get($colors, 'primary'),
                        $secondary: map.get($colors, 'secondary'),
                        $tertiary: map.get($colors, 'tertiary'),
                        $accent: map.get($colors, 'accent'),
                        $background-color: map.get($colors, 'background-color'),
                        $color: map.get($colors, 'color'),
                        $muted: map.get($colors, 'muted')
                    );

                    @include create-theme(
                        $type: 'strings',
                        $prefix: null,
                        $mode: if($name == 'Light', 'Dark', 'Light'),
                        $primary: map.get($colors, 'primary'),
                        $secondary: map.get($colors, 'secondary'),
                        $tertiary: map.get($colors, 'tertiary'),
                        $accent: map.get($colors, 'accent'),
                        $background-color: map.get($colors, 'background-color'),
                        $color: map.get($colors, 'color'),
                        $muted: map.get($colors, 'muted')
                    );
                }
            }
        }
    }
}

@mixin init-themes() {
    @media (prefers-color-scheme: dark) {
        @include prefers-dark;
    }

    @media (prefers-color-scheme: light),
        (prefers-color-scheme: no-preference) {
        @include prefers-light;
    }

    @include colors('&');
}
